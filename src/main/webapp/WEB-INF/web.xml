<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	
	<!--1、启动Spring的容器  -->
	<!-- needed for ContextLoaderListener -->
	<!--启动spring时用到的配置文件-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<!-- Bootstraps the root web application context before servlet initialization -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!--2、springmvc的前端控制器，拦截所有请求  -->
	<!-- The front controller of this Spring Web application, responsible for handling all application requests -->
	<servlet>
		<servlet-name>dispatcherServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--加载springmvc核心配置文件  -->
		<!-- 原文链接：https://blog.csdn.net/sfcchj/article/details/108294352-->
		<!-- 如果不配置contextConfigLocation,默认加载的是/WEB-INF/servlet名称-servlet.xml -->
		<!--<init-param>
			<param-name>contextConfigLocation</param-name>
			&lt;!&ndash;需要在applicationContext.xml同级目录下添加配置文件&ndash;&gt;
			<param-value>classpath:applicationContext-mvc.xml</param-value>
		</init-param>-->
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Map all requests to the DispatcherServlet for handling -->
	<!--
	第一种 *.action 访问以.action结尾的DispatcherServlet进行解析 限制性太强，范围太小
	第二种/,不会拦截jsp，但是会拦截除了jsp之外所有静态资源,
	第三种/*,拦截所有静态资源包括jsp，会出现访问jsp视图时被Spring的DispatcherServlet拦截，导致找不到请求资源引入的404错误
	-->
	<servlet-mapping>
		<servlet-name>dispatcherServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 3、字符编码过滤器，一定要放在所有过滤器之前，否则没有用
	因为其他的过滤器在前先执行，会对请求进行解析，此时会乱码 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceRequestEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>forceResponseEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 4、使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求 -->
	<filter>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HiddenHttpMethodFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--在前端使用PUT发送的请求的时候，需要在web.xml中配置HttpPutFormContentFilter，这样子springMvc才能得到前台发送过来的请求-->
	<filter>
		<filter-name>HttpPutFormContentFilter</filter-name>
		<!--已弃用-->
		<!--<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>-->
		<filter-class>org.springframework.web.filter.FormContentFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>HttpPutFormContentFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
</web-app>